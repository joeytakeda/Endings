[A litany of failures: all the things that we did wrong. E.g. query-string URLs causing failure to archive; content only linked through JS (for instance) that did not get harvested; inconsistent state of live applications; ...]


A Litany of Failures

In the early days of the Endings project, we began to examine in detail the particular ways in which our older projects had progressively broken down. Some problems were obvious: obsolete versions of server-side applications and services (MapServer, MySQL, PHP) had been retired or replaced, and old code would not run on new versions, even if new versions existed. Other failures were more subtle. We investigated, for example, how successfully our applications had been archived by Archive.org and reproduced on the Wayback Machine. It was immediately obvious that sites built on backend databases, where "pages" were in fact queries to the database, were very problematic. The project Le Mariage sous l'Ancien RÃ©gime, which linked to its anthology documents with URLs like this:

http://mariage.uvic.ca/xhtml.xq?id=arrest_contre_les_chastrez

was scarcely archived at all, presumably because the archive crawler was unable to follow or parse the links successfully, so for the most part, early versions of that site consist mainly of notices that "The Wayback Machine has not archived that URL." The same site had a rather gratuitous feature whereby the end user could choose between three available colour schemes, and because that functionality relied entirely on JavaScript, the required CSS files had been retrieved and stored as though they were HTML pages, and no styling appeared on the site pages at all. Site search engines of course failed completely, as did any annotation popups linked from texts which relied on retrieving data by query from the backend database, and JavaScript-based interactivity was generally broken. In fact, the majority of our large-scale, high-profile digital edition projects were scarcely functional at all in the Wayback Machine, and most of their content had not even been retrieved and stored. 

The Internet Archive, albeit a wonderful resource and a remarkable achievement, had never been one of our primary backup strategies. Nevertheless it was disappointing to discover how unsuccessful it had been in its attempts to crawl and reproduce our sites. Although some of these failures could perhaps be laid at the door of the Internet Archive crawler, Heritrix, which had some limitations, most of them were clearly our fault, and resulted from our crude approach to URL construction. One site, the Robert Graves Diary, was represented by only a handful of static pages, since the entirety of its content was designed to be accessed through explicit searches from the home page, with the search parameters encoded in URL query strings; the crawler would have had no way to know what pages existed on the site other than the few information and background pages linked directly from the home page. On the live versions of these sites, any pages accessed by a user were typically constructed on the fly by XQuery and XSLT, so they did not exist in any form which could be backed up even locally by any normal method. 

Digging deeper into methods for backing up and replicating our projects within our own institution, other problems were revealed. Some sites and applications included hard-coded links to local resources using complete URLs, so if the site were replicated in a different location, it would still be dependent on, and prone to send the user over to, the original site. 

Finally, we were forced to acknowledge that few of our projects had adequate documentation, making remediation and reconstruction doubly difficult.

We had, it seemed, spent a dozen years enthusiastically generating fragile, unmanageable, unmaintainable, unarchivable contraptions, and we were going to pay the price for our thoughtlessness.

This is  far from unusual situation. In face, our research suggests that it is the norm for DH projects [citation needed from our survey]. Many DH web applications are built rapidly, using off-the-shelf frameworks and libraries which date quickly and are ultimately guaranteed to fail, and most projects either rebuild their applications in repeated cycles of funding, or see them languish and ultimately disappear. Our situation was perhaps more pointed and critical because we are a base-funded unit with a long lifetime, committed to maintaining our projects even after the funding has disappeared. Units like ours are still relatively rare; in most cases, there is little or no institutional help and no expectation of any. But having caused the problem, we now had to fix it, not just by rebuilding multiple large projects, but by doing so in such a way that we would not have to do the same thing again in another ten years.